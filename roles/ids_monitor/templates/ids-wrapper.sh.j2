#!/bin/sh
# Managed by Ansible - IDS Wrapper Script
# POSIX-compliant wrapper for IDS monitoring

set -e

IDS_HOME="{{ ids_base_path }}"
IDS_LOG="{{ ids_log_path }}"
IDS_CONFIG="{{ ids_config_path }}/ids.conf"
IDS_PIDFILE="/var/run/ids/monitor.pid"

# Source configuration
[ -f "$IDS_CONFIG" ] && . "$IDS_CONFIG"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$$] $1" >> "$IDS_LOG/wrapper.log"
}

# Check if process is running
is_running() {
    if [ -f "$IDS_PIDFILE" ]; then
        pid=$(cat "$IDS_PIDFILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

# Start monitoring
start() {
    if is_running; then
        echo "IDS monitoring is already running"
        exit 0
    fi

    log "Starting IDS monitoring"

    # Create PID directory if needed
    mkdir -p "$(dirname "$IDS_PIDFILE")"

    # Start monitor in background
    nohup "$IDS_HOME/bin/monitor.sh" >> "$IDS_LOG/monitor.log" 2>&1 &
    echo $! > "$IDS_PIDFILE"

    log "IDS monitoring started with PID $(cat "$IDS_PIDFILE")"
}

# Stop monitoring
stop() {
    if ! is_running; then
        echo "IDS monitoring is not running"
        exit 0
    fi

    log "Stopping IDS monitoring"

    pid=$(cat "$IDS_PIDFILE")
    kill "$pid" 2>/dev/null || true

    # Wait for process to stop
    count=0
    while kill -0 "$pid" 2>/dev/null && [ $count -lt 30 ]; do
        sleep 1
        count=$((count + 1))
    done

    # Force kill if still running
    if kill -0 "$pid" 2>/dev/null; then
        log "Force killing IDS monitoring"
        kill -9 "$pid" 2>/dev/null || true
    fi

    rm -f "$IDS_PIDFILE"
    log "IDS monitoring stopped"
}

# Status check
status() {
    if is_running; then
        echo "IDS monitoring is running (PID: $(cat "$IDS_PIDFILE"))"
        exit 0
    else
        echo "IDS monitoring is not running"
        exit 1
    fi
}

# Main
case "${1:-}" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 2
        start
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac